package com.jbit.meitao.service.backexploit.impl;

import com.jbit.meitao.error.BusinessException;
import com.jbit.meitao.error.EmBusinessError;
import com.jbit.meitao.mapper.FunctionsMapper;
import com.jbit.meitao.mapper.PrivilegeMapper;
import com.jbit.meitao.mapper.RoleMapper;
import com.jbit.meitao.mapper.UserMapper;
import com.jbit.meitao.pojo.*;
import com.jbit.meitao.service.backexploit.UserService;

import com.jbit.meitao.service.model.RoleModel;
import com.jbit.meitao.service.model.UserModel;
import org.springframework.beans.BeanUtils;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.Resource;
import java.util.List;
import java.util.stream.Collectors;

@Service
public class UserServiceImpl implements UserService {
    @Resource
    private UserMapper userMapper;
    @Resource
    private PrivilegeMapper privilegeMapper;

    @Resource
    private FunctionsMapper functionsMapper;
    @Resource
    private RoleMapper roleMapper;

    /**
     * 用户登录的方法
     *
     * @param loginName
     * @param userPwd
     * @return
     * @throws BusinessException
     */
    @Override
    @Transactional
    public UserModel getByNameAndPwd(String loginName, String userPwd) throws BusinessException {
        System.out.println("执行成功");
        System.out.println(loginName + userPwd);
        // Example类的使用
        UserExample userExample = new UserExample();
        userExample.createCriteria().andLoginNameEqualTo(loginName).andUserPwdEqualTo(userPwd);
        //根据密码用户名进行查询
        User user = userMapper.selectByNameAndPwdExample(userExample);
        if (user == null) {
            throw new BusinessException(EmBusinessError.USER_LOGIN_FAIL);
        }
        //判断用户是否登录成公 查询当前的角色信息
        user.setRole(roleMapper.selectByRoleKey(user.getRoleId()));
        //成功执行下一步
        UserModel userModel = convertFromDataObject(user);
        return userModel;
    }

    @Override
    public List<Privilege> findMapAndListJson(Integer rId) {
        List<Privilege> privilegeList = privilegeMapper.selectByKeyId(rId);
        for (int i = 0; i < privilegeList.size(); i++) {
            Privilege privilege = privilegeList.get(i);
            FunctionsExample functionsExample = new FunctionsExample();
            functionsExample.createCriteria().andPIdEqualTo(privilege.getPrivilegeId());
            privilege.setFunctionsList(functionsMapper.selectByExample(functionsExample));
        }
        return privilegeList;
    }

    /**
     * 查询所有的角色和用户信息
     *
     * @return
     */
    @Override
    @Transactional
    public List<UserModel> findUserAll() {
        //查询出所有的数据
        List<User> userList = userMapper.selectByExample(null);
        System.out.println("查询到所有的用户信息");
        for (User u : userList) {
            System.out.println(u.toString());
        }
        List<UserModel> userModels = userList.stream().map(user -> {

            UserModel userModel = this.convertFromDataObject(user);

            return userModel;
        }).collect(Collectors.toList());
        return userModels;
    }

    @Override
    public void updateUserPrivilege(Integer userId, Integer roleId) throws BusinessException {
        int i = userMapper.updateByName(userId, roleId);
        if (i != 1) {
            throw new BusinessException(EmBusinessError.PARAMETER_VALIDATION_ERROR);
        }
    }


    /**
     * 登录成功后 将查询到的数据 进行数据校验 并且传递到Controller层
     *
     * @param user
     * @return
     */
    private UserModel convertFromDataObject(User user) {
        if (user == null) {
            return null;
        } else {
            System.out.println("执行数据复制");
            UserModel userModel = new UserModel();
            BeanUtils.copyProperties(user, userModel);
            userModel.setRoleModel(convertFromRoleModer(user.getRole()));
            return userModel;
        }

    }

    /**
     * 复制Role层数据
     */

    private RoleModel convertFromRoleModer(Role role) {
        if (role == null) {
            return null;
        } else {
            System.out.println("执行数据复制");
            RoleModel roleModel = new RoleModel();
            BeanUtils.copyProperties(role, roleModel);

            return roleModel;
        }

    }
}
