package com.jbit.meitao.controller.backexploit;

import com.jbit.meitao.controller.BaseController;
import com.jbit.meitao.error.BusinessException;
import com.jbit.meitao.pojo.Area;
import com.jbit.meitao.pojo.Category;
import com.jbit.meitao.pojo.Product;
import com.jbit.meitao.pojo.Shop;
import com.jbit.meitao.response.CommonReturnType;
import com.jbit.meitao.service.backexploit.AreaService;
import com.jbit.meitao.service.backexploit.CategoryService;
import com.jbit.meitao.service.backexploit.ProductService;
import com.jbit.meitao.service.backexploit.ShopService;
import org.apache.commons.io.FilenameUtils;
import org.apache.commons.lang3.RandomUtils;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import java.io.File;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
@RestController
@RequestMapping(value = "/product")
@CrossOrigin(origins = {"*"}, allowCredentials = "true")
public class ProductController extends BaseController {
    @Resource
    private ProductService productService;
    @Resource
    private AreaService areaService;
    @Resource
    private CategoryService categoryService;
    @Resource
    private ShopService shopService;

    @PostMapping(value = "/productList")
    public Object productList() {
        List<Product> productByLimit = productService.findProductByLimit();
        return productByLimit;
    }

    @GetMapping(value = "/productListGET")
    public Object productList1() {
        List<Product> productByLimit = productService.findProductByLimit();
        return productByLimit;
    }

    @GetMapping(value = "/ppp")
    public CommonReturnType productListTset() {
        List<Product> productByLimit = productService.findProductByLimit();
        return CommonReturnType.create(productByLimit);
    }

    @GetMapping(value = "/acsListJson")
    public CommonReturnType acsListJson() {
        List<Area> areaList = areaService.findAreaAll();
        List<Category> categoryList = categoryService.findCategoryAll();
        List<Shop> shopList = shopService.findSjopAll();
        Map<String, Object> map = new HashMap<String, Object>();
        map.put("area", areaList);
        map.put("category", categoryList);
        map.put("shop", shopList);
        return CommonReturnType.create(map);
    }

    @PostMapping(value = "/acsList", consumes = CONTENT_TYPE_FORMED)
    public CommonReturnType acsList() {
        List<Area> areaList = areaService.findAreaAll();
        List<Category> categoryList = categoryService.findCategoryAll();
        List<Shop> shopList = shopService.findSjopAll();
        Map<String, Object> map = new HashMap<String, Object>();
        map.put("area", areaList);
        map.put("category", categoryList);
        map.put("shop", shopList);
        return CommonReturnType.create(map);
    }

    @PostMapping(value = "/addProduct", consumes = CONTENT_TYPE_FORMED)
    public CommonReturnType addProduct(@RequestParam(value = "title", required = false) String title,
                                       @RequestParam(value = "productDesc", required = false) String productDesc,
                                       @RequestParam(value = "currentPrice", required = false) String currentPrice,
                                       @RequestParam(value = "originaPrice", required = false) String originaPrice,
                                       @RequestParam(value = "areaID", required = false) String areaID,
                                       @RequestParam(value = "shopID", required = false) String shopID,
                                       @RequestParam(value = "categoryID", required = false) String categoryID,
                                       @RequestParam(value = "picture", required = false) MultipartFile[] attachs, HttpServletRequest request) throws BusinessException {

        // 定义多个变量用来存放文件保存的路径
        String picPath1 = null;
        String picPath2 = null;

        String errorInfo = null;// 用来存放上传失败时的错误信息
        boolean flag = true;

        //拼接图片存放的路径
        String path = request.getSession().getServletContext().getRealPath("upload" + File.separator + "goods");
        System.out.println("uploadFile path ============== > " + path);

        for (int i = 0; i < attachs.length; i++) {
            MultipartFile attach = attachs[i];
            if (!attach.isEmpty()) {
                if (i == 0) {
                    errorInfo = "uploadPic1Error";
                } else if (i == 1) {
                    errorInfo = "uploadPic2Error";
                }
                String oldFileName = attach.getOriginalFilename();// 获取文件原名
                System.out.println("uploadFile oldFileName ============== > " + oldFileName);

                String suffix = FilenameUtils.getExtension(oldFileName);// 获取原文件名后缀
                System.out.println("uploadFile prefix============> " + suffix);

                int filesize = 500000;// 设置上传文件的大小 500kb
                System.out.println("uploadFile size============> " + attach.getSize());

                if (attach.getSize() > filesize) {// 上传大小不得超过 500k
                    request.setAttribute(errorInfo, " * 上传大小不得超过 500k");
                    flag = false;
                } else if (suffix.equalsIgnoreCase("jpg") || suffix.equalsIgnoreCase("png")
                        || suffix.equalsIgnoreCase("jpeg") || suffix.equalsIgnoreCase("pneg")) {//若都不成立则上传图片格式不正确
                    String fileName = System.currentTimeMillis() + RandomUtils.nextInt(1, 1000000) + "_pro.jpg";// 随机生一个整数作为文件名前部分
                    System.out.println("new fileName==========> " + attach.getName());

                    File targetFile = new File(path, fileName);//创建图片保存的文件对象

                    if (!targetFile.exists()) {// 若存放文件的目录（文件）不存在，则要创建该目录
                        targetFile.mkdirs();
                    }
                    try {
                        attach.transferTo(targetFile); // 将文件保存到上面创建的目录中（io流写的过程）
                    } catch (Exception e) {
                        e.printStackTrace();
                        request.setAttribute(errorInfo, " * 上传失败！");
                        flag = false;
                    }
                    if (i == 0) {
                        picPath1 = path + File.separator + fileName;
                    } else if (i == 1) {
                        picPath2 = path + File.separator + fileName;
                    }
                } else {
                    request.setAttribute(errorInfo, " * 上传图片格式不正确");
                    flag = false;
                }
            }
        }
        if (flag) {
//			user.setCreatedBy(((User)session.getAttribute(Constants.USER_SESSION)).getId());
            Product product = new Product();
            product.setAreaid(Integer.parseInt(areaID));
            product.setCategoryid(Integer.parseInt(categoryID));
            product.setShopid(Integer.parseInt(shopID));
            product.setCurrentprice(new BigDecimal(currentPrice));
            product.setOriginaprice(new BigDecimal(originaPrice));
            product.setPicture(picPath1);
            product.setTitle(title);
            product.setProductdesc(productDesc);
            productService.addProduct(product);
            // 把商品保存到数据库中
        }
        return CommonReturnType.create(null);
    }
}
