package com.jbit.meitao.controller.backexploit;

import com.alibaba.druid.util.StringUtils;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.jbit.meitao.controller.BaseController;
import com.jbit.meitao.error.BusinessException;
import com.jbit.meitao.error.EmBusinessError;
import com.jbit.meitao.pojo.Functions;
import com.jbit.meitao.pojo.FunctionsExample;
import com.jbit.meitao.pojo.Privilege;
import com.jbit.meitao.pojo.Role;
import com.jbit.meitao.response.CommonReturnType;
import com.jbit.meitao.service.backexploit.FunctionsService;
import com.jbit.meitao.service.backexploit.PrivilegeService;
import com.jbit.meitao.service.backexploit.RoleService;
import com.jbit.meitao.service.backexploit.UserService;
import com.jbit.meitao.service.model.UserModel;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Controller
@RequestMapping(value = "/user")
//跨域请求注解
@CrossOrigin(origins = {"*"}, allowCredentials = "true")
public class UserController extends BaseController {
    @Resource
    private UserService userService;
    @Resource
    private HttpServletRequest httpServletRequest;
    @Autowired
    private RoleService roleService;
    @Resource
    private FunctionsService functionsService;
    @Resource
    private PrivilegeService privilegeService;

    /**
     * 登录的方法
     *
     * @param loginName
     * @param loginPwd
     * @return
     * @throws BusinessException
     */
    @RequestMapping(value = "/loginUser", method = RequestMethod.POST)
    @ResponseBody
    public CommonReturnType loginUser(@RequestParam(value = "userName", required = false) String loginName,
                                      @RequestParam(value = "userPwd", required = false) String loginPwd) throws BusinessException {
        //入参校验
        System.out.println(loginName + loginPwd + "");
        if (StringUtils.isEmpty(loginName) || StringUtils.isEmpty(loginPwd)) {
            throw new BusinessException(EmBusinessError.PARAMETER_VALIDATION_ERROR, "用户名或密码不正确！！");
        }
        UserModel userModel = userService.getByNameAndPwd(loginName, loginPwd);
        System.out.println(userModel.getRoleModel().getRoleName() + "角色名称");
        //将用户登录进入到登录的Session中
        this.httpServletRequest.getSession().setAttribute("IS_LOGIN", true);
        this.httpServletRequest.getSession().setAttribute("LOGIN_USER", userModel);

        return CommonReturnType.create(null);
    }

    /**
     * 跳转到后台页面
     */
    @RequestMapping(value = "/index")
    public String convertToIndex() {

        return "index";
    }

    /**
     * 原始前后端分离 测试页面
     *
     * @return
     */
    @PostMapping(value = "/listPost", consumes = {CONTENT_TYPE_FORMED})
    @ResponseBody
    private CommonReturnType commonTestHtml() {
        List<Privilege> mapAndListJson = userService.findMapAndListJson(1);
        return CommonReturnType.create(mapAndListJson);
    }

    /**
     * 封装前后端分离 测试页面
     *
     * @return
     */
    @PostMapping(value = "/listNewPost", consumes = {CONTENT_TYPE_FORMED})
    @ResponseBody
    private CommonReturnType commonTestHtml2() {
        List<Privilege> mapAndListJson = userService.findMapAndListJson(1);
        List<Map> result = new ArrayList<Map>();
        //套娃开始


        for (int i = 0; i < mapAndListJson.size(); i++) {
            //创建权限对象
            Privilege privilege = mapAndListJson.get(i);
            HashMap map = new HashMap();
            //一级菜单
            map.put("text", privilege.getPrivilegeName());
            //创建二级菜单
            List<Map> mapList = new ArrayList<Map>();
            for (int j = 0; j < privilege.getFunctionsList().size(); j++) {
                HashMap map1 = new HashMap();
                Functions functions = privilege.getFunctionsList().get(j);
                map1.put("text", functions.getFunctionName());
                HashMap map2 = new HashMap();
                map2.put("url", functions.getUrl());
                map1.put("attributes", map2);
                mapList.add(map1);
            }
            map.put("children", mapList);
            result.add(map);
        }
        //套娃结束
        return CommonReturnType.create(result);
    }

    /**
     * 显示原始json 的数据格式
     *
     * @param id
     * @return
     */
    @GetMapping(value = "/listGetTest")
    @ResponseBody
    private CommonReturnType listNewPostTest(@RequestParam(value = "id", required = false) Integer id) {
        List<Privilege> mapAndListJson = userService.findMapAndListJson(id);
        return CommonReturnType.create(mapAndListJson);
    }

    /**
     * 显示封装json 的数据格式
     *
     * @param id
     * @return
     */
    @GetMapping(value = "/listNewGetTest")
    @ResponseBody
    private CommonReturnType fromTestJson1(@RequestParam(value = "id", required = false) Integer id) {
        List<Privilege> mapAndListJson = userService.findMapAndListJson(id);
        List<Map> result = new ArrayList<Map>();
        //套娃开始
        for (int i = 0; i < mapAndListJson.size(); i++) {
            //创建权限对象
            Privilege privilege = mapAndListJson.get(i);
            HashMap map = new HashMap();
            //一级菜单
            map.put("text", privilege.getPrivilegeName());
            //创建二级菜单
            List<Map> mapList = new ArrayList<Map>();
            for (int j = 0; j < privilege.getFunctionsList().size(); j++) {
                HashMap map1 = new HashMap();
                Functions functions = privilege.getFunctionsList().get(j);
                map1.put("text", functions.getFunctionName());
                HashMap map2 = new HashMap();
                map2.put("url", functions.getUrl());
                map1.put("attributes", map2);
                mapList.add(map1);
            }
            map.put("children", mapList);
            result.add(map);
        }
        //套娃结束
        return CommonReturnType.create(result);
    }

    /**
     * 返回到jsp 页面
     *
     * @return
     * @throws BusinessException
     */
    @GetMapping(value = "/listGet")
    @ResponseBody
    private CommonReturnType commonTestJsp() throws BusinessException {
        //ajax异步刷新 通过session 查询到我登录的用户
        UserModel userModel = (UserModel) httpServletRequest.getSession().getAttribute("LOGIN_USER");
        if (userModel == null) {
            //登录失败后返回一个失败的json
            throw new BusinessException(EmBusinessError.USER_NOT_LOGIN);
        }
        //登录成功后根据用户的角色id查询到左边栏
        List<Privilege> mapAndListJson = userService.findMapAndListJson(userModel.getRoleId());
        List<Map> result = new ArrayList<Map>();
        //套娃开始
        for (int i = 0; i < mapAndListJson.size(); i++) {
            //创建权限对象
            Privilege privilege = mapAndListJson.get(i);
            HashMap map = new HashMap();
            //一级菜单
            map.put("text", privilege.getPrivilegeName());
            //创建二级菜单
            List<Map> mapList = new ArrayList<Map>();
            for (int j = 0; j < privilege.getFunctionsList().size(); j++) {
                HashMap map1 = new HashMap();
                Functions functions = privilege.getFunctionsList().get(j);
                map1.put("text", functions.getFunctionName());
                HashMap map2 = new HashMap();
                map2.put("url", functions.getUrl());
                map1.put("attributes", map2);
                mapList.add(map1);
            }
            map.put("children", mapList);
            result.add(map);
        }
        //套娃结束
        return CommonReturnType.create(result);
    }

    /**
     * 老师的方法 查询到数据 如何优化！！！！！
     *
     * @return
     */
    @GetMapping(value = "/commonTestJson")//注解映射的请求路径
    @ResponseBody
    //是指将controller返回的对象通过适当的转换器转换为值订的格式，
    //写到response对象的body区 通常是用来返回JSON 和XML
    //使用注解之后 不会走视图解析器 而是直接将数据写到输入流中
    public CommonReturnType commonTestJson() throws BusinessException, JsonProcessingException {
        //1：判断用户是否登录成功 登录成功获取登录的信息 查询到角色信息
        Boolean isLogin = (Boolean) httpServletRequest.getSession().getAttribute("IS_LOGIN");

        if (isLogin == null || !isLogin.booleanValue()) {
            throw new BusinessException(EmBusinessError.USER_NOT_LOGIN);
        }
        UserModel userModel = (UserModel) httpServletRequest.getSession().getAttribute("LOGIN_USER");
        //根据用户的外键查询相对应的权限信息

        List<Privilege> privilegeList = privilegeService.privilegeList(userModel.getRoleId());

        //返回到封装类Object
        //json的三中工具解析
        //Gson
        //jackson
        return CommonReturnType.create(privilegeList);
    }


}