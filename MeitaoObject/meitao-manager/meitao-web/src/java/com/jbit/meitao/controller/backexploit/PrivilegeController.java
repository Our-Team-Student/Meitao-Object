package com.jbit.meitao.controller.backexploit;

import com.jbit.meitao.controller.BaseController;
import com.jbit.meitao.controller.viewObject.RoleVO;
import com.jbit.meitao.controller.viewObject.UserVO;
import com.jbit.meitao.error.BusinessException;
import com.jbit.meitao.error.EmBusinessError;
import com.jbit.meitao.response.CommonReturnType;
import com.jbit.meitao.service.backexploit.RoleService;
import com.jbit.meitao.service.backexploit.UserService;
import com.jbit.meitao.service.model.RoleModel;
import com.jbit.meitao.service.model.UserModel;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@RestController
@RequestMapping(value = "/product")
@CrossOrigin(origins = {"*"}, allowCredentials = "true")
public class PrivilegeController extends BaseController {

    @Autowired
    UserService userService;

    @Autowired
    RoleService roleService;

    /**
     * 查询所有的用户信息和角色 权限的更改 jsp页面显示
     *
     * @return
     */
    @PostMapping(value = "/ulist", consumes = CONTENT_TYPE_FORMED)
    public CommonReturnType findRoleAndUser() {
        List<UserModel> userModelList = userService.findUserAll();

        List<UserVO> userVOList = userModelList.stream().map(userModel -> {
            UserVO userVO = convertFromUserVO(userModel);
            return userVO;
        }).collect(Collectors.toList());
        //查询角色信息

        List<RoleModel> roleModelList = roleService.finRoleAll();
        List<RoleVO> roleVOList = roleModelList.stream().map(roleModel -> {
            RoleVO roleVO = convertFromRoleVO(roleModel);
            return roleVO;
        }).collect(Collectors.toList());

        Map<String, Object> map = new HashMap<String, Object>();

        map.put("userVO", userVOList);

        map.put("roleVO", roleVOList);

        return CommonReturnType.create(map);
    }

    /**
     * 修改角色的权限
     *
     * @param userID
     * @param roleId
     * @return
     */
    @PostMapping(value = "/updateUser", consumes = CONTENT_TYPE_FORMED)
    public CommonReturnType updateUserByName(@RequestParam("userId") Integer userID,
                                             @RequestParam("roleId") Integer roleId) throws BusinessException {
        System.out.println(userID + "--" + roleId);
        if (userID.equals(null) || roleId.equals(null)) {
            throw new BusinessException(EmBusinessError.PARAMETER_VALIDATION_ERROR);
        }
        userService.updateUserPrivilege(userID, roleId);
        System.out.println("执行成功");
        return CommonReturnType.create(null);
    }

    /**
     * JSON 传递到页面
     *
     * @return
     */
    @GetMapping(value = "/ulistTest")
    public CommonReturnType commonReturnTest() {
        //查询所有的用户信息和角色信息
        List<UserModel> userModelList = userService.findUserAll();
        List<UserVO> userVOList = userModelList.stream().map(userModel -> {
            UserVO userVO = convertFromUserVO(userModel);
            return userVO;
        }).collect(Collectors.toList());
        //查询角色信息

        List<RoleModel> roleModelList = roleService.finRoleAll();
        List<RoleVO> roleVOList = roleModelList.stream().map(roleModel -> {
            RoleVO roleVO = convertFromRoleVO(roleModel);
            return roleVO;
        }).collect(Collectors.toList());

        Map<String, Object> map = new HashMap<String, Object>();

        map.put("userVO", userVOList);

        map.put("roleVO", roleVOList);

        return CommonReturnType.create(map);
    }

    /**
     * 创建将UserModel转换为UserVo的值
     *
     * @param userModel
     * @return
     */
    public UserVO convertFromUserVO(UserModel userModel) {
        if (userModel == null) {
            return null;
        } else {
            UserVO userVO = new UserVO();
            BeanUtils.copyProperties(userModel, userVO);
            userVO.setRoleVO(convertFromRoleVO(userModel.getRoleModel()));
            return userVO;
        }
    }

    /**
     * 创建将RoleModel转换为RoleVo的值
     *
     * @param roleModel
     * @return
     */
    public RoleVO convertFromRoleVO(RoleModel roleModel) {
        if (roleModel == null) {
            return null;
        } else {
            RoleVO roleVO = new RoleVO();
            BeanUtils.copyProperties(roleModel, roleVO);
            return roleVO;

        }
    }
}
